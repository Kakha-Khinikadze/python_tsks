# Напишите программу, которая считывает три числа и выводит их сумму. Каждое число записано в отдельной строке.
#
# def func(a,b,c):
#     return a+b+c

# Напишите программу, которая считывает длины двух катетов в прямоугольном треугольнике и выводит его площадь. Каждое число записано в отдельной строке.

# def func(base, height):
#     return f'Площадь треугольника: {(base * height) / 2}'


# n школьников делят k яблок поровну, неделящийся остаток остается в корзинке. Сколько яблок достанется каждому школьнику? Сколько яблок останется в корзинке?
# Программа получает на вход числа n и k и должна вывести искомое количество яблок (два числа).

# def func(school, apple):
#     return f'яблок достанется каждому школьнику: {apple // school}, яблок останется в корзинке: {apple % school }'

# Дано число n. С начала суток прошло n минут. Определите, сколько часов и минут будут показывать электронные часы в этот момент.
# Программа должна вывести два числа: количество часов (от 0 до 23) и количество минут (от 0 до 59). Учтите, что число n может быть больше, чем количество минут в сутках.

# def func(n):
#     hours = n // 60 % 24
#     minutes = n % 60
#     return  f'Прошло {hours} часов и {minutes} минут'

# Напишите программу, которая считывает целое число и выводит текст, аналогичный приведенному в примере (пробелы важны!).
# The next number for the number 1534 is 1535.
# The previous number for the number 1534 is 1533.
#
# def func(n):
#     next = n + 1
#     prev = n - 1
#     return f'The next number for the number {n} is {next}, The previous number for the number {n} is {prev}'


# В школе решили набрать три новых математических класса. Так как занятия по математике у них проходят в одно и то же время, было решено выделить кабинет для каждого класса
# и купить в них новые парты. За каждой партой может сидеть не больше двух учеников. Известно количество учащихся в каждом из трёх классов. Сколько всего нужно закупить парт
# чтобы их хватило на всех учеников? Программа получает на вход три натуральных числа: количество учащихся в каждом из трех классов.

# def func(cls1, cls2, cls3):
#     cls1 = cls1 // 2 + cls1 % 2
#     cls2 = cls2 // 2 + cls2 % 2
#     cls3 = cls3 // 2 + cls3 % 2
#     count_desks = cls1 + cls2 + cls3
#     return f'Кол-во парт в первом классе:{cls1}, во втором:{cls2}, в третьем:{cls3}, сумма парт: {count_desks}'

# Даны два целых числа. Выведите значение наименьшего из них.

# def func(a, b):
#     if a > b:
#         return b
#     else:
#         return a


# В математике функция sign(x) (знак числа) определена так:
# sign(x) = 1, если x > 0,
# sign(x) = -1, если x < 0,
# sign(x) = 0, если x = 0.
# Для данного числа x выведите значение sign(x).


# def func(x):
#     if x > 0:
#         return 1
#     elif x < 0:
#         return -1
#     else:
#         return 0

# Дано натуральное число. Требуется определить, является ли год с данным номером високосным. Если год является високосным, то выведите YES, иначе выведите NO.
# Напомним, что в соответствии с григорианским календарем, год является високосным, если его номер кратен 4, но не кратен 100, а также если он кратен 400.

# def func(x):
#     if x % 4 == 0 and x % 100 != 0 or x % 400 == 0:
#         return 'YES'
#     else:
#         return 'NO'


# Даны три целых числа. Выведите значение наименьшего из них.


# def func(a, b, c):
#     if a <= b and a <= c:
#         return a
#     elif b <= a and b <= c:
#         return b
#     else:
#         return c

#
# Даны три целых числа. Определите, сколько среди них совпадающих.
# Программа должна вывести одно из чисел: 3 (если все совпадают), 2 (если два совпадает) или 0 (если все числа различны).

#
# def func(a, b, c):
#     if a == b == c:
#         return 3
#     if a != b != c:
#         return 0
#     else:
#         return 2

# Дано натуральное число. Выведите его последнюю цифру.

# def func(x):
#     return x % 10

# Дано положительное действительное число X. Выведите его дробную часть.

# def func(x):
#     return int(str(x).split('.')[-1])

# Дано положительное действительное число X. Выведите его первую цифру после десятичной точки.

# def func(x):
#     return int(str(x).split('.')[1][0])

# Дано трехзначное число. Найдите сумму его цифр.

# def func(x):
#     if x < 100 or x > 999:
#         return None
#     count = 0
#     for i in str(x):
#         count += int(i)
#     return count


# Дано два числа a и b. Выведите гипотенузу треугольника с заданными катетами.

# def func(a, b):
#     return (a ** 2 + b ** 2) ** 0.5


# Даны два целых числа A и B (при этом A ≤ B). Выведите все числа от A до B включительно.

# def func(a, b):
#     for i in range(a, b + 1):
#         print(i)


# Даны два целых числа A и В. Выведите все числа от A до B включительно, в порядке возрастания, если A < B, или в порядке убывания в противном случае.

# def func(a, b):
#     if a <= b:
#         for i in range(a, b + 1):
#             print(i)
#     else:
#         for i in range(a, b - 1, -1):
#             print(i)

# Даны два целых числа A и В, A>B
# . Выведите все нечётные числа от A до B включительно, в порядке убывания. В этой задаче можно обойтись без инструкции if.


# def func(a, b):
#     return [i for i in range(a, b-1, -2)]


# Дано 10 целых чисел. Вычислите их сумму. Напишите программу, использующую наименьшее число переменных.

# def func(*x):
#     return sum(x)

# def func():
#     count = 0
#     for i in range(10):
#         num = int(input())
#         count += num
#     return count

# def func(*x):
#     return sum(x[:10])

# По данному натуральному n вычислите сумму 13+23+33+...+n3.

# def func(n):
#     count = 0
#     for i in range(1, n+1):
#         count += i**3
#     return count


# Факториалом числа n называется произведение 1 × 2 × ... × n. Обозначение: n!.
# По данному натуральному n вычислите значение n!. Пользоваться математической библиотекой math в этой задаче запрещено.

# def func(n):
#     count = 1
#     for i in range(1, n+1):
#         count *= i
#     return count

# По данному натуральном n
#  вычислите сумму 1!+2!+3!+...+n!
# . В решении этой задачи можно использовать только один цикл. Пользоваться математической библиотекой math в этой задаче запрещено.
#
# def func(n):
#     fact = 1
#     sum = 0
#     for i in range(1, n+1):
#         fact *= i
#         sum += fact
#     return sum


# Дана строка.
# Сначала выведите третий символ этой строки.
# Во второй строке выведите предпоследний символ этой строки.
# В третьей строке выведите первые пять символов этой строки.
# В четвертой строке выведите всю строку, кроме последних двух символов.
# В пятой строке выведите все символы с четными индексами (считая, что индексация начинается с 0, поэтому символы выводятся начиная с первого).
# В шестой строке выведите все символы с нечетными индексами, то есть начиная со второго символа строки.
# В седьмой строке выведите все символы в обратном порядке.
# В восьмой строке выведите все символы строки через один в обратном порядке, начиная с последнего.
# В девятой строке выведите длину данной строки.


# string = 'string'
# a = string[2]
# b = string[-2]
# c = string[:5]
# d = string[:-2]
# e = string[::2]
# f = string[1::2]
# g = string[::-1]
# i = string[-1::-2]
# k = len(string)

# Дана строка, состоящая из слов, разделенных пробелами. Определите, сколько в ней слов. Используйте для решения задачи метод count.

# def func():
#     string = 'Строка предложение буква точка препинание'
#     count = string.count(' ') + 1
#     return count


# Дана строка. Разрежьте ее на две равные части (если длина строки — четная, а если длина строки нечетная, то длина первой части должна быть на один символ больше).
# Переставьте эти две части местами, результат запишите в новую строку и выведите на экран.
#
# При решении этой задачи не стоит пользоваться инструкцией if.


# def func(string):
#     middle = len(string) // 2
#     new_string = string[middle:] + string[:middle]
#     return new_string

# Дана строка, состоящая ровно из двух слов, разделенных пробелом. Переставьте эти слова местами. Результат запишите в строку и выведите получившуюся строку.
#
# При решении этой задачи не стоит пользоваться циклами и инструкцией if.

# def func():
#     string = 'string new'
#     new_str = string.split(' ')
#     return new_str[1] + ' ' + new_str[0]
#
# def func(string):
#     words = string.split()
#     return ' '.join(reversed(words))


# Дана строка. Если в этой строке буква f встречается только один раз, выведите её индекс.
# Если она встречается два и более раз, выведите индекс её первого и последнего появления.
# Если буква f в данной строке не встречается, ничего не выводите.
# При решении этой задачи не стоит использовать циклы.


# def func(string):
#     if string.count('f') == 1:
#         return string.find('f')
#     elif string.count('f') >= 2:
#         first_index = string.find('f')
#         last_index = string.rfind('f')
#         return first_index, last_index
#
#
#
# Дана строка. Найдите в этой строке второе вхождение буквы f, и выведите индекс этого вхождения
# Если буква f в данной строке встречается только один раз, выведите число -1, а если не встречается ни разу, выведите число -2.


# def func(string):
#     if string.count('f') == 1:
#         return -1
#     elif string.count('f') == 0:
#         return -2
#     else:
#         return string.find('f', string.find('f') + 1)

# Дана строка, в которой буква h встречается минимум два раза. Удалите из этой строки первое и последнее вхождение буквы h, а также все символы, находящиеся между ними.

# def func(string):
#     first = string.find('h')
#     last = string.rfind('h')
#     return string[:first] + string[last+1:]

#
# Дана строка, в которой буква h встречается как минимум два раза.
# Разверните последовательность символов, заключенную между первым и последним появлением буквы h, в противоположном порядке.


# def func(string):
#     first_h = string.find('h')
#     last_h = string.rfind('h')
#     between_h = string[first_h+1:last_h]
#     reversed_between_h = ''.join(reversed(between_h))
#     return string[:first_h+1] + reversed_between_h + string[last_h:]

# Дана строка. Замените в этой строке все цифры 1 на слово one.

# def func(string):
#     word = string.replace('1', 'one')
#     return word

# Дана строка. Удалите из этой строки все символы @.
#
# def func(string):
#     word = string.replace('@', '')
#     return word

# Дана строка. Замените в этой строке все появления буквы h на букву H, кроме первого и последнего вхождения.


# def func(string):
#     first_h = string.find('h')
#     last_h = string.rfind('h')
#     return string[:first_h+1] + string[first_h+1:last_h].replace('h', 'H') + string[last_h:]

# Дана строка. Удалите из нее все символы, чьи индексы делятся на 3.

# def func(string):
#     return ''.join([char for index, char in enumerate(string) if index % 3 != 0])

# По данному целому числу N распечатайте все квадраты натуральных чисел, не превосходящие N, в порядке возрастания.

# def func(n):
#     i = 1
#     result = []
#     while i*i <= n:
#         result.append(i*i)
#         i += 1
#     return result

# Выведите все элементы списка с четными индексами (то есть A[0], A[2], A[4], ...).

# def func():
#     list = [1,2,3,4,5,6]
#     odd_list = list[::2]
#     return odd_list

# Выведите все четные элементы списка. При этом используйте цикл for, перебирающий элементы списка, а не их индексы!

# def func():
#     list = [1, 2, 3, 4, 5, 6]
#     for i in list:
#         if i % 2 == 0:
#             print(i)
#
#

# Дан список чисел. Выведите все элементы списка, которые больше предыдущего элемента.

# def func():
#     list = [1, 5, 2, 7, 3, 8, 4, 9]
#     for i in range(1, len(list)):
#         if list[i] > list[i-1]:
#             print(list[i])

#
# Дан список чисел. Определите, сколько в этом списке элементов, которые больше двух своих соседей, и выведите количество таких элементов.
# Крайние элементы списка никогда не учитываются, поскольку у них недостаточно соседей.

# def func():
#     lst = [1, 3, 5, 4, 2, 7, 8, 6, 9]
#
#
#     count = 0
#     for i in range(2, len(lst)-1):
#         if lst[i] > lst[i-1] and lst[i] > lst[i+1]:
#             count += 1
#
#     print(count)


# Дан список чисел. Выведите значение наибольшего элемента в списке, а затем индекс этого элемента в списке.
# Если наибольших элементов несколько, выведите индекс первого из них.

# def func():
#     lst = [1, 3, 5, 4, 2, 7, 8, 6, 9]
#     return max(lst), lst.index(max(lst))


# Дан список, упорядоченный по неубыванию элементов в нем. Определите, сколько в нем различных элементов.

# lst = [1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5, 6, 7, 7, 7]
#
# distinct_count = 1
#
# for i in range(1, len(lst)):
#     if lst[i] != lst[i-1]:
#         distinct_count += 1
#
# print(distinct_count)

# Переставьте соседние элементы списка (A[0] c A[1], A[2] c A[3] и т. д.). Если элементов нечетное число, то последний элемент остается на своем месте.

# def func():
#     lst = [1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5, 6, 7, 7, 7]
#     for i in range(0, len(lst)-1, 2):
#         lst[i], lst[i+1] = lst[i+1], lst[i]
#     return lst


# В списке все элементы различны. Поменяйте местами минимальный и максимальный элемент этого списка.

# def func():
#     lst = [1, 2, 3, 4, 5, 6, 7]
#     min_idx = lst.index(min(lst))
#     max_idx = lst.index(max(lst))
#     lst[min_idx], lst[max_idx] = lst[max_idx], lst[min_idx]
#     return lst
#
#

#
# Дан список из чисел и индекс элемента в списке k. Удалите из списка элемент с индексом k, сдвинув влево все элементы, стоящие правее элемента с индексом k.
# Программа получает на вход список, затем число k. Программа сдвигает все элементы, а после этого удаляет последний элемент списка при помощи метода pop() без параметров.
#
# Программа должна осуществлять сдвиг непосредственно в списке, а не делать это при выводе элементов. Также нельзя использовать дополнительный список.
# Также не следует использовать метод pop(k) с параметром.
#
# def func():
#     lst = [1, 2, 3, 4, 5]
#     k = 2
#     for i in range(k, len(lst) - 1):
#         lst[i] = lst[i+1]
#     lst.pop()
#     return lst


# Напишите функцию capitalize(), которая принимает слово из маленьких латинских букв и возвращает его же, меняя первую букву на большую.
# Например, print(capitalize('word')) должно печатать слово Word.
#
# На вход подаётся строка, состоящая из слов, разделённых одним пробелом.
# Слова состоят из маленьких латинских букв. Напечатайте исходную строку, сделав так, чтобы каждое слово начиналось с большой буквы.
# При этом используйте вашу функцию capitalize().
#
# Напомним, что в Питоне есть функция ord(), которая по символу возвращает его код в таблице ASCII, и функция chr(), которая по коду символа возвращает сам символ.
# Например, ord('a') == 97, chr(97) == 'a'.


# def func(word):
#     return word[0].upper() + word[1:]
#
# s = input() # считываем исходную строку
# words = s.split() # разбиваем строку на слова
# capitalized_words = [func(word) for word in words] # применяем capitalize() к каждому слову
# result = ' '.join(capitalized_words) # объединяем слова обратно в строку с пробелами между ними
# print(result) # выводим результат

# print(func())
